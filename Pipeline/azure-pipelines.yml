# Extensão do SpecFlow+LivingDoc no Marketplace:
# https://marketplace.visualstudio.com/items?itemName=techtalk.techtalk-specflow-plus

# Configurando o uso do SpecFlow+LivingDoc em um YAML Pipeline:
# https://docs.specflow.org/projects/specflow-livingdoc/en/latest/Generating/Configuring-the-Build-Step-in-YAML.html

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'ID CONNECTION ACR'
  imageRepository: 'testesconversor'
  containerRegistry: 'resource.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'namesecret-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Configurações para execução da aplicação em background
  File_Log_Execution_WebApp: 'log-execution-site.log'
  Path_Project: './ConversorDistancias'
  Dll_Project: 'ConversorDistancias.dll'
  
  # Configurações para geração de LivingDoc do SpecFlow
  dllProjectTests: '**/Release/ConversorDistancias.Specs.dll'
  pathJsonTestExecution: '**/Release/TestExecution.json'

stages:
- stage: BuildAndTestes
  displayName: Build and Tests stage
  jobs:
  - job: BuildAndTestes
    displayName: BuildAndTestes
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        dotnet publish $(Path_Project) -c Release -o app
        cd ./app
        nohup dotnet $(Dll_Project) > $(File_Log_Execution_WebApp) 2>&1 &
        echo 'Aguardando a inicialização da aplicação a ser testada...'
        sleep 10s
      displayName: Executar a aplicação a ser testada em background (nohup)
      env:
        ASPNETCORE_URLS: 'http://localhost:1234'
    - task: DotNetCoreCLI@2
      displayName: Executar testes do SpecFlow
      inputs:
        command: 'test'
        projects: '**/ConversorDistancias.Specs.csproj'
        arguments: '-c Release -o Release'
      env:
        UrlConversaoDistancias: http://localhost:1234
    - task: SpecFlowPlus@0
      displayName: Gerar LivingDoc do SpecFlow
      inputs:
        generatorSource: 'TestAssembly'
        testAssemblyFilePath: '$(dllProjectTests)'
        testExecutionJson: '$(pathJsonTestExecution)'
        projectLanguage: 'pt'
      condition: always()
    - task: Docker@2
      displayName: Build e Push para o Azure Container Registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(tag)
          latest

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: BuildAndTestes

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'TestesConversor.distancias'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          - task: KubernetesManifest@0
            displayName: Deployment no Azure Kubernetes Service (AKS)
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)